name: CI

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]

jobs:
  create-release:
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - if: startsWith(github.ref, 'refs/tags/v')
        name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  rust:
    runs-on: ${{ matrix.target[0] }}
    needs: create-release

    strategy:
      fail-fast: false
      matrix:
        target:
          - [ ubuntu-latest, i686-unknown-linux-gnu, libximu3, a  ]
          - [ ubuntu-latest, aarch64-unknown-linux-gnu, libximu3, a ]
          - [ ubuntu-latest, x86_64-unknown-linux-gnu, libximu3, a ]
          - [ macos-latest, x86_64-apple-darwin, libximu3, a ]
          - [ macos-latest, aarch64-apple-darwin, libximu3, a ]
          - [ windows-latest, x86_64-pc-windows-gnu, ximu3, lib ]

#          - os: macos-latest
#            library-file: libximu3.a
#          - os: windows-latest
#            library-file: ximu3.lib

    steps:
      - uses: actions/checkout@v2

      - if: matrix.target[0] == 'ubuntu-latest'
        name: Setup Linux
        run: sudo apt-get install libudev-dev

      - name: Build
        env:
          PKG_CONFIG_SYSROOT_DIR: /
        run: |
          rustup target add ${{ matrix.target[1] }}
          cargo build --release --manifest-path=x-IMU3-API/Rust/Cargo.toml --target ${{ matrix.target[1] }}

      - uses: actions/upload-artifact@v3
        with:
          name: rust-${{ matrix.target[1] }}
          path: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}.${{ matrix.target[3] }}

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Zip library
        run: |
          cd x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/
          zip -r ${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip ${{ matrix.target[2] }}.${{ matrix.target[3] }}

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: x-IMU3-API/Rust/target/release/${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip
          asset_name: ${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip
          asset_content_type: application/octet-stream

  python:
    runs-on: ${{ matrix.target[0] }}
    needs: rust

    strategy:
      fail-fast: false
      matrix:
        target:
        - [ ubuntu-latest, i686-unknown-linux-gnu, manylinux_i686 ]
        - [ ubuntu-latest, aarch64-unknown-linux-gnu, manylinux_aarch64 ]
        - [ ubuntu-latest, x86_64-unknown-linux-gnu, manylinux_x86_64 ]

        python-version: [ "cp38-" ]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
        with:
          name: rust-${{ matrix.target[1] }}
          path: x-IMU3-API/Rust/target/release

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel
          python -m pip install matplotlib
          python -m pip install twine
          python -m pip install wheel

      - if: matrix.target[1] == 'ubuntu-latest'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - if: matrix.python-version == 'cp38-*'
        name: Build wheels (python version == 3.8)
        uses: pypa/cibuildwheel@v2.6.1
        env:
          CIBW_ARCHS: all
          CIBW_BUILD: ${{ matrix.python-version }}${{ matrix.target[2] }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_BEFORE_BUILD: pip install certifi numpy==1.19.2 # copied from matplotlib

      - if: matrix.python-version != 'cp38-*'
        name: Build wheels (python version != 3.8)
        uses: pypa/cibuildwheel@v2.6.1
        env:
          CIBW_ARCHS: all
          CIBW_BUILD: ${{ matrix.python-version }}${{ matrix.target[2] }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_BEFORE_BUILD: pip install certifi oldest-supported-numpy # copied from matplotlib
#
#  cmake:
#    runs-on: ${{ matrix.os }}
#    needs: [create-release, rust]
#
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - os: macos-latest
#            gui-file: x-IMU3 GUI.zip
#          - os: windows-latest
#            gui-file: x-IMU3 GUI.exe
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: rust-${{ matrix.os }}
#          path: x-IMU3-API/Rust/target/release
#
#      - name: Build targets
#        run: |
#          mkdir cmake-build-release
#          cd cmake-build-release
#          cmake .. -DCMAKE_BUILD_TYPE=Release
#          cmake --build . --target C-Examples Cpp-Examples x-IMU3-GUI --config Release
#
#      - if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'macos-latest'
#        name: Zip GUI (macOS)
#        run: |
#          cd cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/
#          zip -r "x-IMU3 GUI.zip" "x-IMU3 GUI.app"
#
#      - if: startsWith(github.ref, 'refs/tags/v')
#        name: Upload GUI
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create-release.outputs.upload_url }}
#          asset_path: cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/${{ matrix.gui-file }}
#          asset_name: ${{ matrix.gui-file }}
#          asset_content_type: application/octet-stream
