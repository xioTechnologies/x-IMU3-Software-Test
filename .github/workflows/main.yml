name: CI

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]

jobs:
  create-release:
    runs-on: macos-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - if: startsWith(github.ref, 'refs/tags/v')
        name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-macos:
    runs-on: macos-latest
    needs: create-release

    strategy:
      matrix:
        include:
          - name: Intel
            rust-target: x86_64-apple-darwin
            cmake-target: x86_64
          - name: Apple-Silicon
            rust-target: aarch64-apple-darwin
            cmake-target: arm64

    steps:
      - uses: actions/checkout@v2

      - name: Build Rust API
        run: |
          rustup target add ${{ matrix.rust-target }}
          cargo build --release --manifest-path=x-IMU3-API/Rust/Cargo.toml --target ${{ matrix.rust-target }}

      - name: Build CMake targets
        run: |
          mkdir cmake-build-release
          cd cmake-build-release
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.cmake-target }}
          cmake --build . --target C-Examples Cpp-Examples x-IMU3-GUI

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Zip libray
        run: |
          cd x-IMU3-API/Rust/target/${{ matrix.rust-target }}/release/
          zip -r libximu3-${{ matrix.name }}.zip libximu3.a
          cd ../../../../..

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Zip GUI
        run: |
          cd cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/
          zip -r x-IMU3-GUI-${{ matrix.name }}.zip "x-IMU3 GUI.app"
          cd ../../../..

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: x-IMU3-API/Rust/target/${{ matrix.rust-target }}/release/libximu3-${{ matrix.name }}.zip
          asset_name: libximu3-${{ matrix.name }}.zip
          asset_content_type: application/octet-stream

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload GUI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/x-IMU3-GUI-${{ matrix.name }}.zip
          asset_name: x-IMU3-GUI-${{ matrix.name }}.zip
          asset_content_type: application/octet-stream

  build-windows:
    runs-on: windows-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v2

      - name: Build Rust API
        run: |
          cargo build --release --manifest-path=x-IMU3-API\Rust\Cargo.toml

      - name: Build CMake targets
        run: |
          mkdir cmake-build-release
          cd cmake-build-release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --target C-Examples Cpp-Examples x-IMU3-GUI

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: "3.10" # should match classifiers in setup.py

      # - name: Install Python dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m pip install twine
      #     python -m pip install wheel

      - name: Build and install Python package
        run: |
          cd x-IMU3-API/Python
          python setup.py install --user

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: x-IMU3-API\Rust\target\release\ximu3.lib
          asset_name: ximu3.lib
          asset_content_type: application/octet-stream

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload GUI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: cmake-build-release\x-IMU3-GUI\x-IMU3-GUI_artefacts\Release\x-IMU3 GUI.exe
          asset_name: x-IMU3-GUI.exe
          asset_content_type: application/octet-stream

      # - if: startsWith(github.ref, 'refs/tags/v')
      #   name: Build and publish Python package
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYTHON_TOKEN }}
      #   run: |
      #     cd x-IMU3-API/Python/Python-C-API
      #     python setup.py bdist_wheel
      #     python -m twine upload --verbose --repository pypi dist/*
