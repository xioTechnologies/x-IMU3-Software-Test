name: CI

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]

jobs:
  create-release:
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - if: startsWith(github.ref, 'refs/tags/v')
        name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  rust:
    runs-on: ${{ matrix.target[0] }}
    needs: create-release

    strategy:
      fail-fast: false
      matrix:
        target:
        - [ ubuntu-latest, i686-unknown-linux-gnu, libximu3, a  ]
        - [ ubuntu-latest, aarch64-unknown-linux-gnu, libximu3, a ]
        - [ ubuntu-latest, x86_64-unknown-linux-gnu, libximu3, a ]
        - [ macos-latest, x86_64-apple-darwin, libximu3, a ]
        - [ macos-latest, aarch64-apple-darwin, libximu3, a ]
        - [ windows-latest, x86_64-pc-windows-msvc, ximu3, lib ]

    steps:
      - uses: actions/checkout@v2

      - if: matrix.target[0] == 'ubuntu-latest'
        name: Setup ubuntu
        run: sudo apt-get install libudev-dev

      - name: Build
        env:
          PKG_CONFIG_SYSROOT_DIR: /
        run: |
          rustup target add ${{ matrix.target[1] }}
          cargo build --release --manifest-path=x-IMU3-API/Rust/Cargo.toml --target ${{ matrix.target[1] }}

      - uses: actions/upload-artifact@v3
        name: Upload for later use
        with:
          name: rust-${{ matrix.target[1] }}
          path: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}.${{ matrix.target[3] }}

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Zip library
        uses: vimtor/action-zip@v1
        with:
          files: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}.${{ matrix.target[3] }}
          dest: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip
          asset_name: ${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip
          asset_content_type: application/octet-stream

  python:
    runs-on: ${{ matrix.target[0] }}
    needs: rust

    strategy:
      fail-fast: false
      matrix:
        target:
        - [ ubuntu-latest, i686-unknown-linux-gnu, manylinux_i686 ]
        - [ ubuntu-latest, aarch64-unknown-linux-gnu, manylinux_aarch64 ]
        - [ ubuntu-latest, x86_64-unknown-linux-gnu, manylinux_x86_64 ]
        - [ macos-latest, x86_64-apple-darwin, macosx_x86_64  ]
        - [ macos-latest, aarch64-apple-darwin, macosx_arm64 ]
        - [ windows-latest, x86_64-pc-windows-msvc, win_amd64 ]

        python-version: [ "cp38-", "cp39-", "cp310-" ]

    steps:
      - uses: actions/checkout@v2

      - name: Download rust library
        uses: actions/download-artifact@v3
        with:
          name: rust-${{ matrix.target[1] }}
          path: x-IMU3-API/Rust/target/release

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel
          python -m pip install matplotlib
          python -m pip install twine
          python -m pip install wheel

      - if: matrix.target[0] == 'ubuntu-latest'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.6.1
        env:
          CIBW_ARCHS: all
          CIBW_BUILD: ${{ matrix.python-version }}${{ matrix.target[2] }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_24
          CIBW_BEFORE_BUILD: pip install oldest-supported-numpy
          CIBW_BEFORE_BUILD_LINUX: apt-get update && apt-get install libudev-dev

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Publish Python package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: pypi-AgENdGVzdC5weXBpLm9yZwIkNzFlNzc2NTUtYjJkZi00YWM3LWIzZGItMDMwM2ViZDFlMzNiAAIleyJwZXJtaXNzaW9ucyI6ICJ1c2VyIiwgInZlcnNpb24iOiAxfQAABiCAolo6SrX1B30HxW2QqaOmRQbiGPfS8IrxQyUhLcJxdA
        run: python -m twine upload --verbose --repository testpypi wheelhouse/*

  gui:
    runs-on: ${{ matrix.target[0] }}
    needs: [create-release, rust]

    strategy:
      fail-fast: false
      matrix:
        target:
        - [ ubuntu-latest, x86_64-unknown-linux-gnu, "Ubuntu", '', '' ]
        - [ macos-latest, x86_64-apple-darwin, "Apple Intel", .app, x86_64  ]
        - [ macos-latest, aarch64-apple-darwin, "Apple Silicon", .app, arm64 ]
        - [ windows-latest, x86_64-pc-windows-msvc, "Windows", .exe,  '' ]

    steps:
      - uses: actions/checkout@v2

      - name: Download rust library
        uses: actions/download-artifact@v3
        with:
          name: rust-${{ matrix.target[1] }}
          path: x-IMU3-API/Rust/target/release

      - if: matrix.target[0] == 'ubuntu-latest'
        name: Setup ubuntu
        run: |
          sudo apt-get install libudev-dev
          sudo apt update
          sudo apt install libasound2-dev libjack-jackd2-dev \
          ladspa-sdk \
          libcurl4-openssl-dev \
          libfreetype6-dev \
          libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
          libwebkit2gtk-4.0-dev \
          libglu1-mesa-dev mesa-common-dev \

      - name: Build targets
        run: |
          mkdir cmake-build-release
          cd cmake-build-release
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.target[4] }}
          cmake --build . --target C-Examples Cpp-Examples x-IMU3-GUI --config Release

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Zip GUI
        uses: vimtor/action-zip@v1
        with:
          files: "cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/x-IMU3 GUI${{ matrix.target[3] }}"
          dest: "cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/x-IMU3 GUI-${{ matrix.target[2] }}.zip"

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload GUI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: "cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/x-IMU3 GUI-${{ matrix.target[2] }}.zip"
          asset_name: "x-IMU3 GUI-${{ matrix.target[2] }}.zip"
          asset_content_type: application/octet-stream
