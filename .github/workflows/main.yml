name: CI

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]

jobs:
   create-release:
     runs-on: windows-latest
     outputs:
       upload_url: ${{ steps.create-release.outputs.upload_url }}

     steps:
       - if: startsWith(github.ref, 'refs/tags/v')
         name: Create release
         id: create-release
         uses: actions/create-release@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           tag_name: ${{ github.ref }}
           release_name: Release ${{ github.ref }}
           draft: false
           prerelease: false

  rust:
    runs-on: ${{ matrix.os }}
    needs: create-release

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            library: libximu3.a
          - os: windows-latest
            library: ximu3.lib

    steps:
      - uses: actions/checkout@v2

      - name: Build Rust API
        run: cargo build --release --manifest-path=x-IMU3-API/Rust/Cargo.toml

      - uses: actions/upload-artifact@v3
        with:
          name: rust-${{ matrix.os }}
          path: x-IMU3-API/Rust/target/release/${{ matrix.library }}

      - if: startsWith(github.ref, 'refs/tags/v')
          name: Upload library
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload_url }}
            asset_path: x-IMU3-API/Rust/target/release/${{ matrix.library }}
            asset_name: ${{ matrix.library }}
            asset_content_type: application/octet-stream

#  python:
#    runs-on: ${{ matrix.os }}
#    needs: rust
#
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [macos-latest, windows-latest]
#        python-version: ["3.10"] # should match classifiers in setup.py
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: rust-${{ matrix.os }}
#          path: x-IMU3-API/Rust/target/release
#
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install Python dependencies
#        run: |
#          python -m pip install --upgrade pip
#          python -m pip install twine
#          python -m pip install wheel
#
#      - name: Build and install Python package
#        run: |
#          cd x-IMU3-API/Python
#          python setup.py install --user
#
#  cmake:
#    runs-on: ${{ matrix.os }}
#    needs: rust
#
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [macos-latest, windows-latest]
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: rust-${{ matrix.os }}
#          path: x-IMU3-API/Rust/target/release
#
#      - name: Build CMake targets
#        run: |
#          mkdir cmake-build-release
#          cd cmake-build-release
#          cmake .. -DCMAKE_BUILD_TYPE=Release
#          cmake --build . --target C-Examples Cpp-Examples x-IMU3-GUI

      # - if: startsWith(github.ref, 'refs/tags/v')
      #   name: Zip library
      #   run: |
      #     cd x-IMU3-API/Rust/target/${{ matrix.rust-target }}/release/
      #     zip -r libximu3-${{ matrix.name }}.zip libximu3.a
      #     cd ../../../../..

      # - if: startsWith(github.ref, 'refs/tags/v')
      #   name: Zip GUI
      #   run: |
      #     cd cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/
      #     zip -r x-IMU3-GUI-${{ matrix.name }}.zip "x-IMU3 GUI.app"
      #     cd ../../../..

      # - if: startsWith(github.ref, 'refs/tags/v')
      #   name: Upload library
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.create-release.outputs.upload_url }}
      #     asset_path: x-IMU3-API/Rust/target/${{ matrix.rust-target }}/release/libximu3-${{ matrix.name }}.zip
      #     asset_name: libximu3-${{ matrix.name }}.zip
      #     asset_content_type: application/octet-stream

      # - if: startsWith(github.ref, 'refs/tags/v')
      #   name: Upload GUI
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.create-release.outputs.upload_url }}
      #     asset_path: cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/x-IMU3-GUI-${{ matrix.name }}.zip
      #     asset_name: x-IMU3-GUI-${{ matrix.name }}.zip
      #     asset_content_type: application/octet-stream

  # build-windows:
  #   runs-on: windows-latest
  #   needs: create-release

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build Rust API
  #       run: |
  #         cargo build --release --manifest-path=x-IMU3-API\Rust\Cargo.toml

  #     - name: Build CMake targets
  #       run: |
  #         mkdir cmake-build-release
  #         cd cmake-build-release
  #         cmake .. -DCMAKE_BUILD_TYPE=Release
  #         cmake --build . --target C-Examples Cpp-Examples x-IMU3-GUI --config Release

  #     - if: startsWith(github.ref, 'refs/tags/v')
  #       name: Upload library
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.create-release.outputs.upload_url }}
  #         asset_path: x-IMU3-API\Rust\target\release\ximu3.lib
  #         asset_name: ximu3.lib
  #         asset_content_type: application/octet-stream

  #     - if: startsWith(github.ref, 'refs/tags/v')
  #       name: Upload GUI
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.create-release.outputs.upload_url }}
  #         asset_path: cmake-build-release\x-IMU3-GUI\x-IMU3-GUI_artefacts\Release\x-IMU3 GUI.exe
  #         asset_name: x-IMU3-GUI.exe
  #         asset_content_type: application/octet-stream
