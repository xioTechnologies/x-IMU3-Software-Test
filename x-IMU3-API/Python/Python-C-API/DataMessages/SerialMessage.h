// This file was generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py

#ifndef SERIAL_MESSAGE_H
#define SERIAL_MESSAGE_H

#include "../../../C/Ximu3.h"
#include <Python.h>

typedef struct
{
    PyObject_HEAD
    XIMU3_SerialMessage message;
} SerialMessage;

static void serial_message_free(SerialMessage* self)
{
    Py_TYPE(self)->tp_free(self);
}

PyObject* serial_message_get_timestamp(SerialMessage* self, PyObject* args)
{
    return Py_BuildValue("K", self->message.timestamp);
}

PyObject* serial_message_get_string(SerialMessage* self, PyObject* args)
{
    return Py_BuildValue("s", self->message.char_array);
}

PyObject* serial_message_get_bytes(SerialMessage* self, PyObject* args)
{
    return PyByteArray_FromStringAndSize(self->message.char_array, self->message.number_of_bytes);
}

static PyObject* serial_message_to_string(SerialMessage* self, PyObject* args)
{
    return Py_BuildValue("s", XIMU3_serial_message_to_string(self->message));
}

static PyGetSetDef serial_message_get_set[] = {
        { "timestamp", (getter) serial_message_get_timestamp, NULL, "", NULL },
        { "string",    (getter) serial_message_get_string,    NULL, "", NULL },
        { "bytes",     (getter) serial_message_get_bytes,     NULL, "", NULL },
        { NULL }  /* sentinel */
};

static PyMethodDef serial_message_methods[] = {
        { "to_string", (PyCFunction) serial_message_to_string, METH_NOARGS, "" },
        { NULL } /* sentinel */
};

static PyTypeObject serial_message_type = {
        PyVarObject_HEAD_INIT(NULL, 0)
        .tp_name = "ximu3.SerialMessage",
        .tp_basicsize = sizeof(SerialMessage),
        .tp_dealloc = (destructor) serial_message_free,
        .tp_getset = serial_message_get_set,
        .tp_methods = serial_message_methods,
};

static PyObject* serial_message_from(const XIMU3_SerialMessage* const message)
{
    SerialMessage* const self = (SerialMessage*) serial_message_type.tp_alloc(&serial_message_type, 0);
    self->message = *message;
    return (PyObject*) self;
}

typedef struct
{
    PyObject* callable;
    XIMU3_SerialMessage data;
} SerialPendingCallArg;

static int serial_message_pending_call_func(void* arg)
{
    PyObject* const object = serial_message_from(&((SerialPendingCallArg*) arg)->data);
    PyObject* const tuple = Py_BuildValue("(O)", object);
    Py_DECREF(PyObject_CallObject(((SerialPendingCallArg*) arg)->callable, tuple));
    Py_DECREF(tuple);
    Py_DECREF(object);
    free(arg);
    return 0;
}

static void serial_message_callback(XIMU3_SerialMessage data, void* context)
{
    SerialPendingCallArg* const arg = malloc(sizeof(SerialPendingCallArg));
    arg->callable = (PyObject*) context;
    arg->data = data;
    Py_AddPendingCall(&serial_message_pending_call_func, arg);
}

#endif
